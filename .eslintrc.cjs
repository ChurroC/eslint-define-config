// @ts-check
const { defineConfig, defineTypeScriptRules, defineEslintRules } = require('.');
const { readGitignoreFiles } = require('eslint-gitignore');

module.exports = defineConfig({
  ignorePatterns: [
    ...readGitignoreFiles(),
    '.eslintrc.cjs', // Skip self linting
  ],
  root: true,
  env: {
    es6: true,
    node: true,
  },
  reportUnusedDisableDirectives: true,
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'plugin:prettier/recommended',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: ['./tsconfig.json'],
    warnOnUnsupportedTypeScriptVersion: false,
  },
  plugins: ['@typescript-eslint', 'prettier'],
  rules: {
    ...defineEslintRules({
      curly: ['error'],
      'linebreak-style': ['error', 'unix'],
      'no-case-declarations': 'warn',
      quotes: ['error', 'single', { avoidEscape: true }],
      semi: ['error', 'always'],
    }),
    ...defineTypeScriptRules({
      'array-type': ['error', { default: 'array-simple', readonly: 'generic' }],
      'ban-ts-comment': 'error',
      'consistent-type-imports': 'error',
      'explicit-module-boundary-types': 'error',
      'naming-convention': [
        'error',
        {
          format: ['PascalCase'],
          selector: ['class', 'interface', 'typeAlias', 'typeParameter'],
          leadingUnderscore: 'forbid',
          trailingUnderscore: 'forbid',
        },
      ],
      'no-inferrable-types': 'off',
      'no-unsafe-argument': 'error',
      'no-unsafe-assignment': 'off',
      'no-unsafe-call': 'off',
      'no-unsafe-member-access': 'off',
      'no-unsafe-return': 'error',
      'padding-line-between-statements': [
        'error',
        { blankLine: 'always', prev: 'block-like', next: '*' },
      ],
      'prefer-nullish-coalescing': 'warn',
      'prefer-optional-chain': 'warn',
      'prefer-readonly': 'warn',
      'restrict-template-expressions': [
        'error',
        { allowNumber: true, allowBoolean: true },
      ],
      typedef: [
        'warn',
        { memberVariableDeclaration: true, variableDeclaration: true },
      ],
    }),
  },
  overrides: [
    {
      // Rule files are generated by `generate:rules` script
      files: ['src/rules/**/*.d.ts'],
      rules: {
        ...defineTypeScriptRules({
          'array-type': 'off',
          'no-duplicate-type-constituents': 'off',
          'no-explicit-any': 'off',
          'no-redundant-type-constituents': 'off',
        }),
      },
    },
  ],
});
